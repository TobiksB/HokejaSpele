using System.Collections.Generic;
using UnityEngine;

public class CharacterBase : MonoBehaviour {

    public int gender; // 0 = male, 1 = female
    public int hairStyle;
    public int beardStyle;
    public int eyebrowStyle;

    public Color skinColor;
    public Color eyeColor;
    public Color hairColor;
    public Color mouthColor;

    private enum ItemType {
        Equipment,
        Hair,
        Beard,
        BodyParts,
        Eyebrow
    }

    public class EquipmentSlot {
        public Item item;
        public Item.EquipmentSlots slot;
        public Transform container;
        public GameObject instancedObject;
        public GameObject activeObject; // male or female variation
        public bool inUse;
        public int itemId;
    }

    private List<EquipmentSlot> equipmentSlots = new List<EquipmentSlot>();

    private List<GameObject> bodyParts = new List<GameObject>();

    [HideInInspector]
    public SkinnedMeshRenderer referenceMesh; // used for rigging items to the skeleton

    private ColorChanger colorChanger;

    private void Awake() {
        colorChanger = GetComponent<ColorChanger>();
        if (colorChanger == null) {
            Debug.LogError("ColorChanger component is missing on the character.");
        }
    }

    private void Start() {
        ApplyColors();
    }

    public Item EquipItem(int itemId) { // use this to equip items
        Item i = LoadItem(itemId);
        SetupBody();
        return i;
    }

    public void UnequipSlot(Item.EquipmentSlots slot) {
        UnloadSlot(slot);
        SetupBody();
    }

    public void UnequipAll() {
        foreach (EquipmentSlot s in equipmentSlots) {
            UnequipSlot(s.slot);
        }
    }

    public void ChangeHairstyle(int id) {
        hairStyle = id;
        // Implement the logic to change the hairstyle
    }

    public void ChangeEyebrowstyle(int id) {
        eyebrowStyle = id;
        // Implement the logic to change the eyebrow style
    }

    public void ChangeBeardstyle(int id) {
        beardStyle = id;
        // Implement the logic to change the beard style
    }

    public void ChangeGender(int id) {
        gender = id;
        // Implement the logic to change the gender
    }

    public void ChangeSkinColor(Color c) {
        skinColor = c;
        ApplyColors();
    }

    public void ChangeHairColor(Color c) {
        hairColor = c;
        ApplyColors();
    }

    public void ChangeEyeColor(Color c) {
        eyeColor = c;
        ApplyColors();
    }

    private void ApplyColors() {
        if (colorChanger != null) {
            foreach (var changer in colorChanger.changers) {
                switch (changer.type) {
                    case ColorChanger.Type.Skin:
                        changer.rend.materials[changer.materialIndex].color = skinColor;
                        break;
                    case ColorChanger.Type.Hair:
                        changer.rend.materials[changer.materialIndex].color = hairColor;
                        break;
                    case ColorChanger.Type.Eyes:
                        changer.rend.materials[changer.materialIndex].color = eyeColor;
                        break;
                    case ColorChanger.Type.Mouth:
                        changer.rend.materials[changer.materialIndex].color = mouthColor;
                        break;
                }
            }
        }
    }

    public List<string> GetAvailableHairStyles() {
        // Return a list of available hair styles
        return new List<string> { "1", "2", "3", "4", "5", "6" }; // Example IDs
    }

    public List<string> GetAvailableBeardStyles() {
        // Return a list of available beard styles
        return new List<string> { "1", "2", "3", "4", "5", "6"}; // Example IDs
    }

    public List<string> GetAvailableEyebrowStyles() {
        // Return a list of available eyebrow styles
        return new List<string> { "1"}; // Example IDs
    }

    private void SetupBody() {
        // Implement the logic to set up the body
    }

    private void UnloadSlot(Item.EquipmentSlots slot) {
        if (GetEquipmentSlot(slot).inUse) {
            // Implement the logic to unload the slot
        }
    }

    public EquipmentSlot GetEquipmentSlot(Item.EquipmentSlots slot) {
        // Implement the logic to get the equipment slot
        return null;
    }

    private Item LoadItem(int itemId) {
        // Implement the logic to load the item
        return null;
    }

    private Item LoadItem(int itemId, ItemType itemType) {
        if (itemId == 0) {
            // Implement the logic to load the item
        }
        // Implement the logic to load the item based on the item type
        return null;
    }
}